# .cursorrules

You are an AI assistant helping with the Superscale super-resolution toolkit containing HiT-SR, TSD-SR, and VARSR models.

## Code Guidelines
- Do not modify any code until explicitly instructed to do so
- Review code thoroughly before making any changes
- Confirm with user before implementing major structural changes
- Follow Python PEP 8 style guide
- Use type hints where appropriate
- Add docstrings for all public functions and classes

## Repository Structure
- `/HiT-SR/`: Hierarchical Transformer for Efficient Image Super-Resolution
- `/TSD-SR/`: One-Step Diffusion with Target Score Distillation
- `/VARSR/`: Visual Autoregressive Modeling for Image Super-Resolution

## Quick Commands

### HiT-SR Testing
```bash
cd HiT-SR && python basicsr/test.py -opt options/Test/test_HiT_SIR_x4.yml
```

### TSD-SR Testing
```bash
cd TSD-SR && python test/test_tsdsr.py --pretrained_model_name_or_path /path/to/sd3 -i imgs/test -o outputs/test --lora_dir checkpoint/tsdsr --embedding_dir dataset/default
```

### VARSR Testing
```bash
cd VARSR && python test_varsr.py
```

## Model Requirements
- HiT-SR: PyTorch 1.8.0, Python 3.8
- TSD-SR: Diffusers 0.29.1, Python 3.9
- VARSR: PyTorch 2.2.1, Python 3.9

## Documentation Language
All documentation, comments, and code should be written in English.

## Common Tasks
1. **Running inference**: Use the test scripts in each model directory
2. **Training models**: Use distributed training scripts with appropriate GPU settings
3. **Evaluating results**: Use test_metrics.py scripts for quantitative evaluation
4. **Debugging**: Check logs, reduce batch size for memory issues, verify CUDA compatibility

## Best Practices
- Always activate the appropriate conda environment before running scripts
- Check GPU memory before running large models
- Use configuration files (YAML) for experiment settings
- Save checkpoints regularly during training
- Document any new functionality with clear examples